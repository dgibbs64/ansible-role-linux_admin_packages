---
- name: "Update apt cache (Debian Family)"
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"

- name: "Ensure rpm-python is installed (rpm/zypper)"
  ansible.builtin.package:
    name: python3-rpm
    state: present
  when: ansible_os_family == "RedHat" or ansible_os_family == "Suse"

- name: "Ensure linux admin packages are available"
  ansible.builtin.package:
    name: "{{ global_packages }}"
    state: latest

# Debian Family
- name: "Ensure linux admin packages are available (Debian Family)"
  ansible.builtin.apt:
    name: "{{ debian_family_packages }}"
    state: latest
  when: ansible_os_family == "Debian"

# Debian
- name: "Ensure linux admin packages are available (Debian)"
  ansible.builtin.apt:
    name: "{{ debian_packages }}"
    state: latest
  when: ansible_distribution == "Debian"

- name: "Ensure linux admin packages are available (Debian 12)"
  ansible.builtin.apt:
    name: "{{ debian12_packages }}"
    state: latest
  when: ansible_distribution == "Debian" and ansible_distribution_major_version == "12"

- name: "Ensure linux admin packages are available (Debian 11)"
  ansible.builtin.apt:
    name: "{{ debian11_packages }}"
    state: latest
  when: ansible_distribution == "Debian" and ansible_distribution_major_version == "11"

- name: "Ensure linux admin packages are available (Debian 10)"
  ansible.builtin.apt:
    name: "{{ debian10_packages }}"
    state: latest
  when: ansible_distribution == "Debian" and ansible_distribution_major_version == "10"

# Ubuntu
- name: "Ensure universe repo is enabled (Ubuntu for non-arm64)"
  ansible.builtin.apt_repository:
    repo: "deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} universe"
    state: present
  when: ansible_distribution == "Ubuntu" and ansible_architecture != "aarch64"

- name: "Ensure universe repo is enabled (Ubuntu for arm64)"
  ansible.builtin.apt_repository:
    repo: "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports {{ ansible_distribution_release }} universe"
    state: present
  when: ansible_distribution == "Ubuntu" and ansible_architecture == "aarch64"

- name: "Ensure linux admin packages are available (Ubuntu)"
  ansible.builtin.apt:
    name: "{{ ubuntu_packages }}"
    state: latest
  when: ansible_distribution == "Ubuntu"

- name: "Ensure linux admin packages are available (Ubuntu 22.04)"
  ansible.builtin.apt:
    name: "{{ ubuntu_2204_packages }}"
    state: latest
  when: ansible_distribution == "Ubuntu" and ansible_distribution_release == "jammy"

- name: "Ensure linux admin packages are available (Ubuntu 20.04)"
  ansible.builtin.apt:
    name: "{{ ubuntu_2004_packages }}"
    state: latest
  when: ansible_distribution == "Ubuntu" and ansible_distribution_release == "focal"

- name: "Ensure linux admin packages are available (Ubuntu 18.04)"
  ansible.builtin.apt:
    name: "{{ ubuntu_1804_packages }}"
    state: latest
  when: ansible_distribution == "Ubuntu" and ansible_distribution_release == "bionic"

# RedHat Family
- name: "Ensure dnf package manager is installed (RedHat Family)"
  ansible.builtin.yum:
    name:
      - dnf
    state: latest
  when: ansible_os_family == "RedHat"

# - name: "Ensure linux admin packages are available (RedHat Family)"
#   ansible.builtin.dnf:
#     name: "{{ redhat_packages }}"
#     state: latest
#   when: ansible_os_family == "RedHat"

- name: "Get EPEL repository information (RedHat Family) (epel)"
  ansible.builtin.stat:
    path: "{{ epel_repofile_path }}"
  register: epel_repofile_result
  when: ansible_os_family == "RedHat"

- name: "Ensure linux admin packages are available (RedHat 9 Family)"
  ansible.builtin.dnf:
    name: "{{ redhat_9_packages }}"
    state: latest
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "9"

- name: "Ensure linux admin packages are available (RedHat 9 Family) (epel)"
  ansible.builtin.dnf:
    name: "{{ redhat_9_epel_packages }}"
    state: latest
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "9"
    - epel_repofile_result.stat.exists

- name: "Ensure linux admin packages are available (RedHat 8 Family)"
  ansible.builtin.dnf:
    name: "{{ redhat_8_packages }}"
    state: latest
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

- name: "Ensure linux admin packages are available (RedHat 8 Family) (epel)"
  ansible.builtin.dnf:
    name: "{{ redhat_8_epel_packages }}"
    state: latest
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "8"
    - epel_repofile_result.stat.exists

- name: "Ensure linux admin packages are available (RedHat 7 Family)"
  ansible.builtin.yum:
    name: "{{ redhat_7_packages }}"
    state: latest
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

- name: "Ensure linux admin packages are available (RedHat 7 Family) (epel)"
  ansible.builtin.yum:
    name: "{{ redhat_7_epel_packages }}"
    state: latest
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "7"
    - epel_repofile_result.stat.exists

- name: "Ensure linux admin packages are available (Fedora)"
  ansible.builtin.dnf:
    name: "{{ fedora_packages }}"
    state: latest
  when: ansible_os_family == "RedHat" and ansible_distribution == "Fedora"
